from typing import TypeVar, overload, Generic, Union

from olo.expression import BinaryExpression
from olo.field import Field
from olo.interfaces import SQLASTInterface
from olo.mixins.operations import BinaryOperationMixin

T = TypeVar('T')
U = TypeVar('U')
FN = TypeVar('FN', bound='Function')


class Function(SQLASTInterface[T], BinaryOperationMixin[T], Generic[T]):
    @overload
    def __init__(self, *args: Function[T], **kwargs) -> None: ...

    @overload
    def __init__(self, *args: Field[T], **kwargs) -> None: ...

    @overload
    def __init__(self, *args: T, **kwargs) -> None: ...

    def alias(self: FN, name: str) -> FN: ...


def COUNT(a: T) -> T: ...

def SUM(a: T) -> T: ...

def DISTINCT(a: T) -> T: ...

def AVG(a: T) -> T: ...

def SORT(a: T) -> T: ...

def MAX(a: T) -> T: ...

def MIN(a: T) -> T: ...

@overload
def LENGTH(a: Field[str]) -> Function[int]: ...
@overload
def LENGTH(a: str) -> int: ...

class PartialIf(Function[T], Generic[T]):
    @overload
    def ELSE(self, v: T) -> PartialIf[T]: ...

    @overload
    def ELSE(self, v: U) -> PartialIf[Union[T, U]]: ...

class IF:
    def __init__(self, exp: BinaryExpression) -> None: ...
    def THEN(self, v: T) -> PartialIf[T]: ...
