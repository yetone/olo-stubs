from typing import TypeVar, overload, Generic, Union

from olo.expression import BinaryExpression
from olo.field import Field
from olo.interfaces import SQLASTInterface

T = TypeVar('T')
U = TypeVar('U')
FN = TypeVar('FN', bound='Function')


class Function(SQLASTInterface[T], Generic[T]):
    @overload
    def __init__(self, *args: Field[T], **kwargs) -> None: ...

    @overload
    def __init__(self, *args: T, **kwargs) -> None: ...

    def alias(self: FN, name: str) -> FN: ...


class COUNT(Function[T], Generic[T]): ...

class SUM(Function[T], Generic[T]): ...

class DISTINCT(Function[T], Generic[T]): ...

class AVG(Function[T], Generic[T]): ...

class SORT(Function[T], Generic[T]): ...

class MAX(Function[T], Generic[T]): ...

class MIN(Function[T], Generic[T]): ...

class LENGTH(Function[int]): ...

class PartialIf(Function[T], Generic[T]):
    @overload
    def ELSE(self, v: T) -> PartialIf[T]: ...

    @overload
    def ELSE(self, v: U) -> PartialIf[Union[T, U]]: ...

class IF:
    def __init__(self, exp: BinaryExpression) -> None: ...
    def THEN(self, v: T) -> PartialIf[T]: ...
