[case testFieldsInferred]
from olo import Model, Field

class BaseModel(Model):
    pass

class User(BaseModel):
    __table_name__ = 'users'
    id = Field(int, primary_key=True)
    name = Field(str)

user: User
reveal_type(user.id)  # N: Revealed type is 'builtins.int*'
reveal_type(User.name)  # N: Revealed type is 'olo.field.Field[builtins.str]'
[out]

[case testFieldsInferredInstance]
from olo import Model, Field

class BaseModel(Model):
    pass

class User(BaseModel):
    __table_name__ = 'users'
    id = Field(int, primary_key=True)
    name = Field(str, noneable=True)

user: User
reveal_type(user.id)  # N: Revealed type is 'builtins.int*'
reveal_type(user.name)  # N: Revealed type is 'Union[builtins.str*, None]'
reveal_type(User.name)  # N: Revealed type is 'olo.field.Field[Union[builtins.str, None], Any]'
[out]

[case testBatchField]
from olo import Model, Field, BatchField

class BaseModel(Model):
    pass

class Person(BaseModel):
    pass

class User(BaseModel):
    __table_name__ = 'users'
    id = Field(int, primary_key=True)
    name = Field(str, noneable=True)
    person = BatchField(Person)
    user = BatchField(lambda: User)

user: User
reveal_type(user.person)  # N: Revealed type is 'Union[main.Person*, None]'
reveal_type(user.user)  # N: Revealed type is 'Union[main.User*, None]'
[out]

[case testBatchFieldWithInvalidGetter]
from olo import Model, Field, BatchField

class BaseModel(Model):
    pass

class Person(BaseModel):
    pass

class User(BaseModel):
    __table_name__ = 'users'
    id = Field(int, primary_key=True)
    name = Field(str, noneable=True)
    person = BatchField(Person)

    @person.getter # E: Argument 1 to "getter" of "BatchField" has incompatible type "Callable[[User, Any], Any]"; expected "Callable[[Type[Any], List[Any]], List[Optional[Person]]]"
    def get_persons(cls, users):
        return None
[out]

[case testBatchFieldWithValidGetter]
from olo import Model, Field, BatchField

class BaseModel(Model):
    pass

class Person(BaseModel):
    pass

class User(BaseModel):
    __table_name__ = 'users'
    id = Field(int, primary_key=True)
    name = Field(str, noneable=True)
    person = BatchField(Person)

    @person.getter
    @classmethod
    def get_persons(cls, users):
        return None
[out]

[case testModelCreate]
from olo import Model, Field

class BaseModel(Model):
    pass

class User(BaseModel):
    __table_name__ = 'users'
    id = Field(int, primary_key=True, auto_increment=True)
    name = Field(str)
    age = Field(int)
    foo = Field(str)

User.create(name='yetone') # E: Required args: `age`, `foo` not provided
User(foo='yetone') # E: Required args: `name`, `age` not provided
User(name='yetone', age=12, foo='yetone') # N:
User.create(name='yetone', age=12, foo='yetone') # N:
[out]

[case testModelGet]
from olo import Model, Field

class BaseModel(Model):
    pass

class User(BaseModel):
    __table_name__ = 'users'
    id = Field(int, primary_key=True, auto_increment=True)
    name = Field(str)
    age = Field(int)
    foo = Field(str)

user = User.get(1)
reveal_type(user)  # N: Revealed type is 'Union[main.User*, None]'
[out]

[case testModelGetBy]
from olo import Model, Field

class BaseModel(Model):
    pass

class User(BaseModel):
    __table_name__ = 'users'
    id = Field(int, primary_key=True, auto_increment=True)
    name = Field(str)
    age = Field(int)
    foo = Field(str)

user = User.get_by(name='yetone')
reveal_type(user)  # N: Revealed type is 'Union[main.User*, None]'
user0 = User.get_by(name=1) # E: Incompatible type for "name" of "User" (got "int", expected "str")
[out]

[case testModelGetsBy]
from olo import Model, Field

class BaseModel(Model):
    pass

class User(BaseModel):
    __table_name__ = 'users'
    id = Field(int, primary_key=True, auto_increment=True)
    name = Field(str)
    age = Field(int)
    foo = Field(str)

users = User.gets_by(name='yetone')
reveal_type(users)  # N: Revealed type is 'builtins.list[main.User*]'
[out]

[case testModelGets]
from olo import Model, Field

class BaseModel(Model):
    pass

class User(BaseModel):
    __table_name__ = 'users'
    id = Field(int, primary_key=True, auto_increment=True)
    name = Field(str)
    age = Field(int)
    foo = Field(str)

users = User.gets([1, 2])
reveal_type(users)  # N: Revealed type is 'builtins.list[Union[main.User, None]]'
[out]
