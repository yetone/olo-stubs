[case testQueryFirst]
from olo import Model, Field

class BaseModel(Model):
    pass

class User(BaseModel):
    __table_name__ = 'users'
    id = Field(int, primary_key=True)
    name = Field(str)

user = User.query.filter(name='yetone').first()
reveal_type(user)  # N: Revealed type is 'Union[main.User*, None]'
if user:
    reveal_type(user.id) # N: Revealed type is 'builtins.int*'
    reveal_type(user.name) # N: Revealed type is 'builtins.str*'
[out]

[case testQueryAll]
from olo import Model, Field

class BaseModel(Model):
    pass

class User(BaseModel):
    __table_name__ = 'users'
    id = Field(int, primary_key=True)
    name = Field(str)

users = User.query.filter(name='yetone').all()
reveal_type(users)  # N: Revealed type is 'builtins.list[main.User*]'
[out]

[case testQueryEntities]
from olo import Model, Field

class BaseModel(Model):
    pass

class User(BaseModel):
    __table_name__ = 'users'
    id = Field(int, primary_key=True)
    name = Field(str)
    age = Field(int)

r = User.query(User.name, User.age).filter(name='yetone').all()
reveal_type(r)  # N: Revealed type is 'builtins.list[Tuple[builtins.str, builtins.int]]'
[out]
